#!/usr/bin/env ruby
$:.unshift(File.dirname(__FILE__) + '/../lib') unless $:.include?(File.dirname(__FILE__) + '/../lib')

require 'rubygems'
require 'rquery'

# credit: http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/244139
require 'irb'
require 'irb/completion'

module IRB
   def IRB.parse_opts
     # Don't touch ARGV, which belongs to the app which called this module.
   end

   def IRB.start_session(*args)
     unless $irb
       IRB.setup nil
       ## maybe set some opts here, as in parse_opts in irb/init.rb?
     end

     workspace = WorkSpace.new(*args)

     if @CONF[:SCRIPT] ## normally, set by parse_opts
       $irb = Irb.new(workspace, @CONF[:SCRIPT])
     else
       $irb = Irb.new(workspace)
     end

     @CONF[:IRB_RC].call($irb.context) if @CONF[:IRB_RC]
     @CONF[:MAIN_CONTEXT] = $irb.context

     trap 'INT' do
       $irb.signal_handle
     end

     custom_configuration if defined?(IRB.custom_configuration)

     catch :IRB_EXIT do
       $irb.eval_input
     end

     ## might want to reset your app's interrupt handler here
   end
end

module Help
  def cheat
    puts ""
    puts %| RQUERY DSL EXAMPLES                                                              |
    puts %| -------------------------------------------------------------------------------- |
    puts %{ visit "<url>"                    : navigate the browser to <url>                 }
    puts %{ jquery("a").length               : count the links                               }
    puts %{ jquery("input[type='radio']")    : all radio buttons                             }
    puts %{ jquery("#search_button").click   : click the element with id 'search_button'     } 
    puts %{ jquery("body a").first.text      : the text of the first anchor in the body      }
    puts %{ jquery("table.red td").each      : each cell in the table with class 'red'       }
    puts %{ jquery("a:first").next("p")      : the paragaph after the first link             }
    puts %{ close                            : close the browser                             }
    puts ""
  end
end

class Object
  include IRB::ExtendCommandBundle # so that Marshal.dump works
end

class RQuerySession
  include RQuery::BrowserDsl
  include Help
  
  def to_s
    "rquery"
  end
end

puts "-- RQuery IRB session (type 'cheat' for examples)"
IRB.start_session(RQuerySession.new)